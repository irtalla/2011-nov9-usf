HTML
	hypertext markup language
	was originally a child of SGML (standard generalized markup language), but as of HTML5 it no longer is
		- because it is no longer a child of SGML, it no longer needs a doctype declaration (DTD)
			- <!DOCTYPE html>
	based on tags (like any markup language)
		- HTML's tags are pre-defined (unlike the user-defined tags of XML)
		- <html></html>
		- tags have attributes
			<div style="color:blue" width="200px"></div>
			<a href="https://revature.com">Link text</a>
		- the tags exist in the DOM in a tree structure
			- there is a hierarchy to the tags in your html file
			- <div> <a></a> </div>
	DOM: document object model
		- "compiled HTML," the final HTML structure for the page after any changes/events, etc.
		- this includes all of the HTML elements that are on the final page shown on the browser
	<div></div> the general/generic block element
		- semantic versions include <header>, <footer>, <article>, etc.
	<span></span> the generic inline element
	<a href=""></a> our tag for making links (hypertext)
	<img src=""> our image tag (self-closing)
	<br> line break (new line), self-closing
	<ol></ol> and <ul></ul> ordered and unordered lists, <li></li> list items
	<table></table> tables, <tr> table row, <th> table header, <td> table data
	<p></p> paragraph tag
	<form> user input forms, used for grouping together various input tags
		<input name="" type=""> self-closing
		<select> <option></option> </select> drop-down menus
		<button type=""></button> buttons
		<label for=""></label> used for labelling each input element (for attribute references name attribute on input)
	general structure for the page:
	<html>
		<head>
			this includes title, metadata, references to css/js, etc
		</head> 
		<body>
			<!-- this is a comment -->
			this includes what you actually see on the page
		</body> 
	</html>

CSS
	cascading style sheets
	this is what we use to add the "looks" of our HTML
	where HTML is our structure, CSS is our styling
	/* this is a comment */
	selectors and properties: a selector would be selecting which elements to style a certain way,
		properties describe how we want to style those elements
	div {
		color: red; /* color is the text color */
		background-color: rgb(22, 33, 44);
		background-color: #00ff00;
		font-family: Gill Sans, sans-serif;
		width: 20px;
		margin:auto;
		border: 2px solid black;
	}
	.className {
		/* this would reference any HTML element with the class attribute "className"
		   for example <div class="className"></div>
		*/
		color: blue;
	}
	#idName {
		/* this would reference any HTML element with the id attribute "idName" */
	}
	the order which styles are applied is based on specificity, then based on the order that it appears in the document
		a class selector for a certain div will be applied rather than just the plain div selector,
			because it's more specific

JavaScript
	a scripting language built for client-side web applications
		- also used now on servers, databases, etc.
		- scripting language: a language that automates tasks, and is interpreted, not compiled
	supported by all modern browsers, removing most cons of client-side rendering
		(these cons would be worrying about whether the client can run code, worrying about different environments, etc)
	Ecma manages the standards specifications for JavaScript
		these standards versions are called ECMAScript
		we use ES6 (ES2015) because it has many useful features and is well-supported by browsers
	high-level, multi-paradigm (functional, object-oriented, etc.)
	dynamically-typed
		this means that variables don't have to be declared with any specific type, and their type can change dynamically
	types
		"primitive" types
			- number
			- boolean
			- string
			- null
			- undefined
			- symbol
		"object" types
			- objects
			- arrays
			- functions
		objects and arrays are both stored as key-value pairs
			keys are stored as strings (even array indices)
			JSON: JavaScript Object Notation
				- the format that objects are written in in JS
				- there are JSON mappers for most other languages so they can receive/send JSON objects
				- {
					"id":5,
					"name":"Fluffy",
					"age":6
				  }
		truthy & falsey
			any type in JS will evaluate to true or false
			(a truthy value evaluates to true, a falsey value evaluates to false)
			falsey values:
				- empty strings
				- NaN
				- 0
				- null
				- false
				- undefined
		== vs. ===
			== checking whether the value is equal (performs type coercion)
			1 == "1" // true
			=== checking whether the value and type are equal
			1 === "1" // false