Web Services
	- a service is, essentially, software that provides services
	  to other components over a network
	- a web service is the above, where the network is the internet
	- follows service-oriented architecture (SOA)
		1. logically represents a business activity with a
		   specified outcome
		2. self-contained
		3. black box for consumers (they don't know the details
		   of their interaction with the software)
		4. may consist of underlying services (doesn't have to)
	- two main types
		- SOAP: simple object access protocol. older, more rigid
		  design, transfers XML documents, any protocol
		- REST: representational state transfer. newer, more
		  flexible, transfers any type of document, protocol
		  must be HTTP
REST
	- REpresentational State Transfer
	- a web service architecture designed by Roy Fielding
	- transfer the state of a representation of an object to a database
	- a RESTful web service must meet the following constraints:
		1. client-server architecture: the front end and back end
		   of the application are two separate applications (i.e.
		   Java back end, Angular/React/etc. front end)
		2. statelessness: the server does not store client context
		   between requests, all necessary information is sent to
		   the server in every request from the front end
		3. cacheability: particular responses from the back end are
		   able to be cached for easy reuse, especially if they are
		   used often
		4. layered system: the user cannot tell whether there are
		   any intermediaries between them and the database
		5. code on demand: OPTIONAL. where necessary, the back end
		   can send scripts to offer additional functionality to
		   the front end as a response.
		6. uniform interface: requests/responses use the following
		   patterns:
			i. URI model: requests are sent in a particular
			   format: /collection/identifier
			ii. resources are manipulated through representations,
			   i.e. when changes are made, they are made to the
			   representations being sent, rather than in the
			   back end after certain directions were given.
			iii. self-descriptive messages: a GET request to
			   "/cat" should get the cats.
			iv. HATEOAS: hypermedia as the engine of application
			   state. when a resource has a lot of information,
			   it can include URIs so that the client can send
			   requests to those URIs for further information.
HTTP
	- hypertext transfer protocol: a client-server protocol
		- client to server = front-end to back-end
		- client initiates the communication
	- follows a request-response format, sort of like sending a letter
	  then receiving one back.
	- http requests consist of:
		- verb: what HTTP method is being used
		- URI: the endpoint of the requested resource
		- HTTP version
		- request header: metadata
		- request body: message content
	- http responses consist of:
		- status code
		- http version
		- response header: metadata
		- response body: message content
	- http methods (verbs)
		- GET: used for retrieving a resource or set of resources.
		  request body is empty.
		- POST: sends an entity for the server to accept, usually
		  used for creating/adding resources (a POST request in a
		  RESTful application should be sent to the URI of a
		  collection, e.g. "/collection" with no identifier), often
		  also used for logging in
		- PUT: sends an entity for the server to accept, usually
		  used for updating resources (a PUT request in a RESTful
		  application should be sent to the URI of the specific
		  entity being changed, e.g. "/collection/identifier")
		- DELETE: specifies an entity to be deleted (URI pattern
		  should be same as PUT), often also used for logging out
		- OPTIONS: sent by the browser, checks which verbs are
		  allowed on the specified endpoint before actual request
		  is sent there
	- idempotence: if a function is idempotent, you can repeat it over
	  and over with exactly the same results
		- GET, PUT, and DELETE are idempotent: the results after
		  performing the method will be the same if you repeat it
		- POST is not idempotent
	- status codes
		- 100s: informational
		- 200s: success
			- 201: created
		- 300s: redirect
		- 400s: client error
			- 400: bad request
			- 401: unauthorized (must be logged in)
			- 403: forbidden (cannot access even if logged in)
			- 404: not found
			- 405: method not allowed
			- 418: i'm a teapot (cannot brew coffee)
		- 500s: server error
			- 500: internal server error
			- 503: service unavailable (usually for maintenance)
Javalin
	- a lightweight framework for Java and Kotlin
	- abstracts away Servlets
	- runs on an embedded Jetty server
	- heavy use of lambdas
	- setup:
		- javalin, slf4j, and jackson dependencies
		- jar packaging
		- in main method:
			Javalin app = Javalin.create();
			Javalin app = Javalin.create(config -> {});
			app.start(8080); // port number
		- HTTP handlers:
			app.get("path", (ctx) -> { //handling });
			app.post("path", (ctx) -> {});
			app.before("path", (ctx) -> {});
			app.after("path", (ctx) -> {});
		- shortcut to setting up paths: app.routes() sets up a
		  static instance so that you can call get, post, etc.
			app.routes(() -> {
				path("cats", () -> {
					get(CatController::getCats);
					post(CatController::addCat);
				});
			});
		- handler methods should take Context object as param
			- in the lambda implementations, ctx is this object
			- in the .routes() method specifications, the method
			  itself is used as the implementation, so those
			  methods need to have a Context parameter
		- Context ctx methods
			- see documentation javalin.io/documentation#context
			- abstraction of HttpServletRequest and
			  HttpServletResponse objects, so you can access
			  the HTTP request to get information like path,
			  path parameters, query parameters, request body,
			  etc. and then write to the HTTP response with
			  the response body, status code, etc.