-- create schema florist;

/*
  multi-line comment
*/

-- DDL
create table flower (
	flower_id serial primary key,
	name varchar(30) unique not null,
	current_price money not null
);

create table purchase (
	purchase_id serial primary key,
	flower_id int references flower,
);

-- alter table purchase add column price money not null;

-- drop table purchase cascade constraints;

-- if we wanted a composite key
create table example (
	column_1 int check(column_1 > 5),
	column_2 int,
	primary key (column_1, column_2)
);


-- DML
insert into flower values
	(default, 'rose', 5.99),
	(default, 'daisy', 5.25),
	(default, 'sunflower', 6.99);
insert into flower values
	(default, 'hibiscus', 9.89),
	(default, 'peony', 5.85),
	(default, 'echinacea', 8.05);

insert into flower values (1, 'rose', 5.99);
	
insert into purchase values
	(default, 1, 6.99),
	(default, 1, 4.99),
	(default, 3, 8.99),
	(default, 3, 9.59),
	(default, 3, 8.49),
	(default, 6, 10.12);
	
insert into purchase values (default, 10, 1000);

update flower set current_price = 6.00 where name = 'peony';
update flower set name = 'red rose', current_price = 6.49 where name = 'rose';
update flower set current_price = 7.49 where flower_id > 4;

delete from purchase where flower_id = 6;
delete from flower where flower_id = 6;

-- DQL
select * from flower;
select name, current_price from flower;
select name, current_price from flower where current_price <= '6.00';
select * from flower order by current_price desc;

-- joins
-- inner join
select * from flower join purchase on flower.flower_id = purchase.flower_id;
-- outer joins
select * from flower left outer join purchase on flower.flower_id = purchase.flower_id;
select * from purchase right outer join flower on flower.flower_id = purchase.flower_id;
select * from flower full outer join purchase on flower.flower_id = purchase.flower_id;
-- cross join
select * from flower cross join purchase;
-- thetajoin
select b.id, b.name, b.current_price, b.purchase_id, b.price, b.flower_id from
		(select f.flower_id as id, name, current_price, p.flower_id, purchase_id,
		price from flower as f join purchase as p on current_price < price) as b
	join purchase as a on b.id = a.flower_id;
	
-- scalar functions: single input, single output
-- examples: round, trim, substr, length, upper, lower, concat, cast
select upper(name) from flower;
select round(price::numeric)::money from purchase;
select cast(price as numeric) from purchase;
select concat(name, name) from flower;

-- aggregate functions: multiple input, single output
-- examples: count, avg, sum, max, min
select count(purchase_id) from purchase where flower_id = 3;
select avg(price::numeric)::money from purchase;

-- GROUP BY and HAVING
-- group by allows us to group identical data
-- without group by, there would be three rows that say
-- "3 sunflower 3" and two rows of "1 rose 2"
select flower_id, name, count(price) from flower join purchase using (flower_id)
	group by flower_id;

-- having
-- essentially works as a where clause but with aggregate functions/group by
select flower_id, name, count(price) from flower join purchase using (flower_id)
	group by flower_id having name = 'rose';

select flower_id, name from flower join purchase using (flower_id);
select flower_id, name from flower join purchase on flower.flower_id = purchase.flower_id;


-- check constraints
create table example (
	column_1 int check(column_1 > column_2) check(column_1 > 2),
	column_2 int,
	letter char(1) check(letter = 'M' or letter = 'F'),
	primary key (column_1, column_2)
);

drop table example;

insert into example values (4, 5);