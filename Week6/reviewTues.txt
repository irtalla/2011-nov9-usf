SpringCore (cont'd)
	- Stereotypes
		- annotations for beans you want to be in IoC container (beans that you want managed by Spring)
		- four main stereotypes
			- @Component: standard managed bean; other stereotypes include this one implicitly
			- @Controller: bean registered with SpringWeb, handles HTTP requests & responses
			- @Service: stateless managed bean (it doesn't hold any sort of info, just performs tasks)
			- @Repository: bean that retrieves data from a database (these are your DAOs)
	- bean scopes
		- singleton: one of this bean is created; all requests for the bean get this same bean
		- prototype: every time the bean is requested, a new instance is created
		- request: web-only, new bean instance for each HTTP request
		- session: web-only, new bean instance for each HTTP session
		- global: portlets-only, new bean instance per global HTTP session
	- @Bean
		- an annotation used over a method to specify that the returned object should be managed by the IoC container
		- good for objects that we didn't write the class for
SpringWebMVC
	- follows the front controller design pattern + MVC design pattern
		- Spring's DispatcherServlet acts as the Front Controller servlet
		- Spring's HandlerMapper figures out where to delegate requests
		  (gives the correct controller to the dispatcher servlet)
		- Spring controllers handle the requests
		- Spring also has the ViewResolver for server-side rendering
	- setting up
		- with xml - map the dispatcher servlet as a default servlet in
		  web.xml (deployment descriptor)
		- without xml - set up the servlet config @Configuration bean
		  to map the dispatcher servlet
	- controllers
		- controllers are the objects that handle the http requests & responses the way that our delegates did
		- get the @Controller stereotype
			- @RestController stereotype: implicitly places @ResponseBody over all methods
			- @ResponseBody: the method is not returning a view (is returning a resource)
		- @RequestMapping(path="/login", method=RequestMethod.POST)
		- @GetMapping, @PostMapping, @PutMapping, etc.
			- @GetMapping(path="/login")
		- @CrossOrigin: goes at the top of the class & specifies locations that we can receive requests from
			- @CrossOrigin(origins="http://localhost:4200") if we want our local Angular app to be able to send requests
			- also has allowCredentials, etc. for being more specific with CORS rules
		- @RequestBody: goes in front of a parameter, allows us to get the object that is being sent in the request body
			- specifically for JSON, XML, etc.
		- @RequestParam: goes in front of a parameter, allows us to retrieve form data from a request
			- @RequestParam("user") String username
			- works for login encoded form data
		- @PathVariable: goes in front of a parameter, allows us to retrieve info from the URI/path that was sent
			- @GetMapping(path="pokemon/{id}")
			- @PathVariable("id") Integer id
		- to use/access a session in your controller, just put an HttpSession object in your parameters for the method
			- this tells Spring to pass the session object into this method
			- then use it as normal (session.setParameter("person", p))
	- ResponseEntity<T>
		- this basically represents the HTTP response that we are sending back
		- ResponseEntity.ok().build();
		- ResponseEntity.status(404).build();
		- ResponseEntity.notFound().build();
		- ResponseEntity.ok(obj);