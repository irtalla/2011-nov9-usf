Spring
	- Java AOP framework
	- modular, lightweight
		- a lightweight framework is one that doesn't require many
		  changes to be made to an already existing application in
		  order to implement it
	- made by Rod Johnson in 2002 to replace EJB (Enterprise Java Beans)
		- EJB was not lightweight - it required a lot of modification
		  to a project in order to integrate it
	- Spring modules
		- SpringCore (IoC container, necessary for Spring)
		- SpringWeb-MVC
		- SpringData
		- SpringAOP
		- SpringORM
		- SpringJDBCTemplate
	- Spring projects
		- SpringBoot
		- SpringCloud
		- SpringRoo
		- SpringSecurity
	- IoC Container
		- "inversion of control," Spring manages the lifecycle of your beans
		- you specify the beans and dependencies, and the IoC container manages them
			- creates the beans (you never use the new keyword)
			- handles dependency injection
		- represented by the BeanFactory or ApplicationContext
			- use the factory design pattern for creating beans
			- BeanFactory is the older version, uses slightly less memory
			- ApplicationContext is the newer (and better) version, features l10n & i18n
	- dependency injection
		- you specify dependencies (some entity that another entity requires in order to function)
		- the IoC container finds the appropriate bean for that dependency, and injects it
		- 4 types of dependency injection
			- constructor injection: the dependency is placed/injected by calling an overloaded constructor
				- this is used by Angular, and can be used by Spring
				- this is also generally considered best practice with Spring
			- setter injection: the dependency is placed/injected by calling the setter method
				- this can be used by Spring
			- field injection: the dependency is placed/injected directly into the field using reflection
				- this can be used by Spring
			- interface injection
				- Spring doesn't have this
		- @Autowired
			- the annotation that tells Spring that this object is a dependency
			- it can be placed in the relevant location for the type of injection you want to use
				(over the field for field injection, over the setter for setter injection, etc.)
		- dependency injection allows for loose coupling